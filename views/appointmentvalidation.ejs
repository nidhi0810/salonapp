<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Outlet Appointment Management</title>
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      crossorigin="anonymous"
    />
    <style>
      .container {
        margin-top: 30px;
      }
      .appointment-card {
        margin-bottom: 15px;
        padding: 15px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f8f9fa;
      }
      .appointment-card h5 {
        margin-bottom: 10px;
      }
    </style>
  </head>
  <body>
    <div class="container">
      <h1 class="text-center">Outlet Appointment Management</h1>
      <hr />

      <!-- Appointments Section -->
      <div id="appointmentsSection">
        <h2>Appointments</h2>
        <div id="appointmentsList" class="row"></div>
      </div>
    </div>

    <!-- Edit Appointment Modal -->
    <div
      class="modal fade"
      id="editAppointmentModal"
      tabindex="-1"
      aria-labelledby="editAppointmentModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editAppointmentModalLabel">
              Edit Appointment
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <form id="editAppointmentForm">
              <div class="mb-3">
                <label for="appointmentDate" class="form-label">Date</label>
                <input
                  type="date"
                  class="form-control"
                  id="appointment-date"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="appointmentTime" class="form-label">Time</label>
                <input
                  type="time"
                  class="form-control"
                  id="appointment-time"
                  required
                />
              </div>
              <div class="mb-3">
                <label for="searchServicesPackages" class="form-label"
                  >Search Services and Packages</label
                >
                <input
                  type="text"
                  class="form-control"
                  id="searchServicesPackages"
                  placeholder="Search for services or packages..."
                  oninput="filterOptions()"
                />
                <div
                  id="suggestions"
                  class="dropdown-menu"
                  style="display: none; position: absolute"
                ></div>
              </div>
              <div class="mb-3">
                <label for="selectedItems" class="form-label"
                  >Selected Services and Packages</label
                >
                <div id="selectedItems" class="border p-3"></div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Close
            </button>
            <button type="button" class="btn btn-primary" onclick="saveEdit()">
              Save changes
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Bootstrap JS -->
    <script
      src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"
      crossorigin="anonymous"
    ></script>

    <!-- JavaScript -->
    <script>
      const API_URL = "https://bayleaf.onrender.com/api";

      // Fetch Appointments and Render on the Page
      // Fetch Appointments and Render on the Page
      async function loadAppointments() {
        try {
          const response = await fetch(`${API_URL}/appointments`, {
            method: "GET",
            credentials: "include", // Include cookies for authentication
          });

          // Handle redirection to login
          if (response.redirected) {
            window.location.href = response.url; // Redirect to login page
            return; // Stop further execution
          }

          // Ensure the response is valid (status code 200-299)
          if (!response.ok) {
            throw new Error(
              `Error fetching appointments: ${response.status} ${response.statusText}`
            );
          }

          // Safely parse the JSON response
          const appointments = await response.json();
          console.log("Appointments:", appointments);

          const list = document.getElementById("appointmentsList");
          list.innerHTML = ""; // Clear existing content

          // Fetch the current user role and ID
          const userRoleResponse = await fetch(`${API_URL}/userRole`, {
            credentials: "include",
          });
          const { role, userId } = await userRoleResponse.json(); // Assuming `userId` is returned along with role

          // Fetch staff details (only if the user is admin)
          let staffList = [];
          if (role === "admin") {
            const staffresponse = await fetch(`${API_URL}/staff`, {
              method: "GET",
            });
            const staffData = await staffresponse.json();
            staffList = staffData.data || []; // Ensure it's an array
          }

          console.log("Staff List:", staffList); // Should log the correct list of staff

          // Filter appointments for staff
          const filteredAppointments =
            role === "staff"
              ? appointments.filter((appointment) =>
                  appointment.assignedTo.includes(userId)
                ) // Filter by staff's userId
              : appointments; // For admin, show all appointments

          console.log("Filtered Appointments:", filteredAppointments);

          // Check if there are no appointments
          if (!filteredAppointments || filteredAppointments.length === 0) {
            list.innerHTML = "<p>No appointments found.</p>";
            return;
          }

          filteredAppointments.forEach((appointment) => {
            const card = document.createElement("div");
            card.className = "col-md-4 appointment-card";

            // ✅ Fix: Extract service names from nested structure
            const serviceNames = appointment.services
              .map((s) => s.service?.serviceName || "N/A")
              .join(", ");

            // ✅ Fix: Extract package names from nested structure
            const packageNames = appointment.packages
              .map((p) => p.package?.packageName || "N/A")
              .join(", ");

            // ✅ Dropdown for admin role
            const assignToDropdown =
              role === "admin"
                ? `
  <div class="d-flex align-items-center mt-2">
    <label for="assignTo" class="me-2"><strong>Assign To:</strong></label>
    <select id="assignTo-${
      appointment._id
    }" class="form-select me-2" style="width: auto;" multiple>
      ${staffList
        .map((staff) => `<option value="${staff._id}">${staff.name}</option>`)
        .join("")}
    </select>
    <button class="btn btn-primary btn-sm" onclick="assignToStaff('${
      appointment._id
    }', '${appointment.status}')">Assign</button>
  </div>
`
                : "";

            // ✅ Full card rendering
            card.innerHTML = `
    <div class="position-relative">
      <button 
        class="btn btn-warning btn-sm position-absolute top-0 end-0" 
        onclick="openEditModal('${appointment._id}', '${
              appointment.user._id
            }')">
        Edit
      </button>

      <h5>${appointment.customerName}</h5>
      <p><strong>Contact Number:</strong> ${
        appointment.user?.mobile || "N/A"
      }</p>
      <p><strong>Services:</strong> ${serviceNames}</p>
      <p><strong>Packages:</strong> ${packageNames}</p>
      <p><strong>Remarks:</strong> ${appointment.remarks || "No remarks"}</p>
      <p><strong>Date:</strong> ${new Date(
        appointment.appointmentDate
      ).toLocaleDateString()}</p>
      <p><strong>Time:</strong> ${appointment.appointmentTime || "N/A"}</p>
      <div>
        <label for="status-${appointment._id}"><strong>Status:</strong></label>
        <select 
          id="status-${appointment._id}" 
          class="form-select form-select-sm" 
          onchange="updateAppointment('${
            appointment._id
          }', { status: this.value })">
          <option value="Request Sent" ${
            appointment.status === "Request Sent" ? "selected" : ""
          }>Request Sent</option>
          <option value="Confirmed" ${
            appointment.status === "Confirmed" ? "selected" : ""
          }>Confirmed</option>
          <option value="Cancelled" ${
            appointment.status === "Cancelled" ? "selected" : ""
          }>Cancelled</option>
          <option value="Did Not Turn Up" ${
            appointment.status === "Did Not Turn Up" ? "selected" : ""
          }>Did Not Turn Up</option>
          <option value="Partially Completed" ${
            appointment.status === "Partially Completed" ? "selected" : ""
          }>Partially Completed</option>
          <option value="All Completed" ${
            appointment.status === "All Completed" ? "selected" : ""
          }>All Completed</option>
        </select>
      </div>
      ${assignToDropdown}
    </div>
  `;

            list.appendChild(card);
          });
        } catch (error) {
          console.error("Error loading appointments:", error);

          // Display error message on the page
          const list = document.getElementById("appointmentsList");
          list.innerHTML =
            "<p>Error loading appointments. Please try again later.</p>";
        }
      }

      // Function to assign a staff member to an appointment
      async function assignToStaff(appointmentId, status) {
        const dropdown = document.getElementById(`assignTo-${appointmentId}`);

        // Check if dropdown exists
        if (!dropdown) {
          console.error("Dropdown not found for appointment:", appointmentId);
          return;
        }

        // Get the selected staff IDs (now multiple selections)
        const staffIds = Array.from(dropdown.selectedOptions).map(
          (option) => option.value
        );

        // Check if any staff members are selected
        console.log("Assigning staff with IDs:", staffIds);
        if (staffIds.length === 0) {
          alert("Please select at least one staff member.");
          return;
        }

        console.log("Appointment ID:", appointmentId); // Log appointmentId for debugging
        console.log("Status:", status); // Log status to check its value

        try {
          const response = await fetch(
            `${API_URL}/appointments/${appointmentId}/assign`,
            {
              method: "PUT",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ staffIds }), // Send an array of staff IDs
            }
          );

          // Check if the request was successful
          if (!response.ok) {
            const errorData = await response.json();
            throw new Error(errorData.message || "Failed to assign staff");
          }

          const updatedAppointment = await response.json();
          console.log("Updated Appointment:", updatedAppointment); // Log the updated appointment

          // alert("Staff assigned successfully!");
          loadAppointments(); // Reload appointments
        } catch (error) {
          console.error("Error assigning staff:", error);
          alert("Failed to assign staff. Please try again.");
        }
      }

      // Function to open the modal and populate the fields with the previously stored values
      async function openEditModal(appointmentId, user) {
        // Store the appointmentId globally
        window.currentAppointmentId = appointmentId;

        // Populate the modal with the current appointment details
        const appointmentDateField =
          document.getElementById("appointment-date");
        const appointmentTimeField =
          document.getElementById("appointment-time");

        try {
          // Fetch appointment details using the appointmentId
          const response = await fetch(`${API_URL}/cart/${user}`);
          const appointmentData = await response.json();

          if (response.ok && appointmentData) {
            const { serviceId, packageId, appointmentDate, appointmentTime } =
              appointmentData;

            // Set the appointment date and time
            if (appointmentDateField && appointmentTimeField) {
              appointmentDateField.value = appointmentDate;
              appointmentTimeField.value = appointmentTime;
            }

            // Prepare the selected items (services and packages)
            const selectedItems = [
              ...serviceId.map((service) => ({
                type: "service",
                name: service.serviceName,
              })),
              ...packageId.map((pkg) => ({
                type: "package",
                name: pkg.packageName,
              })),
            ];

            // Render the selected items in the modal
            const selectedItemsContainer =
              document.getElementById("selectedItems");
            selectedItemsContainer.innerHTML = ""; // Clear any existing items
            selectedItems.forEach((item) =>
              addSelectedItem(item, selectedItemsContainer)
            );

            // Fetch available services and packages
            let combinedOptions = [];
            try {
              const [servicesResponse, packagesResponse] = await Promise.all([
                fetch(`${API_URL}/services`),
                fetch(`${API_URL}/packages`),
              ]);
              const servicesData = await servicesResponse.json();
              const packagesData = await packagesResponse.json();

              if (servicesData.data && packagesData.data) {
                combinedOptions = [
                  ...servicesData.data.map((service) => ({
                    type: "service",
                    name: service.serviceName,
                  })),
                  ...packagesData.data.map((pkg) => ({
                    type: "package",
                    name: pkg.packageName,
                  })),
                ];
              } else {
                console.error(
                  "Error: Invalid services or packages data format"
                );
              }
            } catch (error) {
              console.error("Error fetching services or packages:", error);
            }

            // Attach the search box logic
            const searchBox = document.getElementById("searchServicesPackages");
            const suggestionsContainer = document.getElementById("suggestions");
            searchBox.oninput = () =>
              filterOptions(
                combinedOptions,
                suggestionsContainer,
                selectedItemsContainer
              );

            // Show the modal
            var myModal = new bootstrap.Modal(
              document.getElementById("editAppointmentModal"),
              {
                keyboard: false,
              }
            );
            myModal.show();
          } else {
            console.error(
              "Error fetching appointment data:",
              appointmentData.message
            );
          }
        } catch (error) {
          console.error("Error fetching appointment details:", error);
        }
      }

      // Function to filter options in the dropdown
      function filterOptions(
        combinedOptions,
        suggestionsContainer,
        selectedItemsContainer
      ) {
        const query = document
          .getElementById("searchServicesPackages")
          .value.toLowerCase();
        suggestionsContainer.innerHTML = ""; // Clear previous suggestions

        if (!query) {
          suggestionsContainer.style.display = "none";
          return;
        }

        const filteredOptions = combinedOptions.filter((option) =>
          option.name.toLowerCase().includes(query)
        );

        filteredOptions.forEach((option) => {
          const suggestionItem = document.createElement("div");
          suggestionItem.className = "dropdown-item";
          suggestionItem.textContent = `${option.name} (${option.type})`;
          suggestionItem.onclick = () => {
            addSelectedItem(option, selectedItemsContainer);
            document.getElementById("searchServicesPackages").value = ""; // Clear search box
            suggestionsContainer.style.display = "none"; // Hide suggestions
          };
          suggestionsContainer.appendChild(suggestionItem);
        });

        suggestionsContainer.style.display =
          filteredOptions.length > 0 ? "block" : "none";
      }

      // Function to add a selected item
      function addSelectedItem(item, container) {
        const itemDiv = document.createElement("div");
        itemDiv.className =
          "d-flex justify-content-between align-items-center mb-2";
        itemDiv.textContent = `${item.name} (${item.type})`;

        const removeButton = document.createElement("button");
        removeButton.className = "btn btn-danger btn-sm";
        removeButton.textContent = "Remove";
        removeButton.onclick = () => container.removeChild(itemDiv);

        itemDiv.appendChild(removeButton);
        container.appendChild(itemDiv);
      }

      // Function to save the changes after editing
      async function saveEdit() {
        if (!window.currentAppointmentId) {
          console.error("No appointment ID found!");
          return;
        }

        const updatedDate = document.getElementById("appointment-date").value;
        const updatedTime = document.getElementById("appointment-time").value;

        // Retrieve selected services and packages from the selected items container
        const selectedItemsContainer = document.getElementById("selectedItems");

        const selectedItems = Array.from(selectedItemsContainer.children).map(
          (itemDiv) => {
            const text = itemDiv.textContent.trim(); // Get the text content
            const [name, typeWithParentheses] = text.split(" (");
            const type = typeWithParentheses.replace(")", ""); // Remove the closing parenthesis
            return { name, type };
          }
        );
        console.log(selectedItems);
        // Separate services and packages
        const selectedServices = selectedItems
          .filter((item) => item.type.includes("service"))
          .map((item) => item.name);
        const selectedPackages = selectedItems
          .filter((item) => item.type.includes("package"))
          .map((item) => item.name);

        // Debug: Log the data to check if it's correct
        console.log("Updated Appointment Data to be sent:", {
          updatedDate,
          updatedTime,
          selectedServices,
          selectedPackages,
        });

        // Close the modal after saving
        const myModal = bootstrap.Modal.getInstance(
          document.getElementById("editAppointmentModal")
        );
        myModal.hide();

        // Call the API to update the appointment
        await updateAppointment(window.currentAppointmentId, {
          appointmentDate: updatedDate,
          appointmentTime: updatedTime,
          services: selectedServices,
          packages: selectedPackages,
        });
      }

      async function updateAppointment(id, updates) {
        console.log("Updating appointment with data:", updates); // Debugging log

        await fetch(`${API_URL}/appointments/${id}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify(updates),
        })
          .then((response) => response.json())
          .then((data) => {
            console.log("Backend response:", data); // Debugging log for backend response
            loadAppointments(); // Load the updated appointments list
          })
          .catch((error) => {
            console.error("Error updating appointment:", error);
          });
      }

      // Initial Load
      loadAppointments();
    </script>
  </body>
</html>
