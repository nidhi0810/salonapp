<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Appointments</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      :root {
        --primary-color: #7c3aed; /* Deep Purple */
        --secondary-color: #ede9fe; /* Light Purple for table stripe */
        --header-bg: #5b21b6; /* Darker header purple */
        --text-light: #f9f9f9;
        --light-color: #f3f4f6;
        --dark-color: #1f2937;
      }

      body {
        background-color: var(--light-color);
        color: var(--dark-color);
      }

      h2 {
        color: var(--primary-color);
      }

      .btn-outline-primary {
        color: var(--primary-color);
        border-color: var(--primary-color);
      }

      .btn-outline-primary:hover {
        background-color: var(--primary-color);
        color: white;
      }

      .badge.bg-success {
        background-color: var(--primary-color) !important;
      }

      /* Updated table header and rows */
      .table thead th {
        background-color: var(--header-bg);
        color: var(--text-light);
        border-color: var(--header-bg);
      }

      .table-striped tbody tr:nth-of-type(odd) {
        background-color: var(--secondary-color);
      }

      .table-bordered th,
      .table-bordered td {
        border-color: var(--secondary-color);
      }

      .table td,
      .table th {
        vertical-align: middle;
      }
    </style>
    <style>
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100vh;
        background-color: #f8f9fa;
        border-right: 1px solid #dee2e6;
        padding: 20px 0;
        z-index: 1000;
      }

      .main-content {
        margin-left: 250px; /* Important: offset by sidebar width */
        padding: 20px;
        background-color: #fff;
        min-height: 100vh;
        overflow-x: auto;
      }

      .profile-avatar img {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        object-fit: cover;
      }

      body {
        margin: 0;
        background-color: #f1f1f1;
      }
    </style>
  </head>
  <body class="bg-light">
    <!-- Sidebar -->
    <%- include('adminpanel') %>

    <!-- Main Content -->
    <div class="main-content">
      <div class="container mt-5">
        <h2 class="mb-4">Appointments</h2>
        <table
          id="appointmentsTable"
          class="table table-bordered table-striped"
        >
          <thead>
            <tr>
              <th>Customer</th>
              <th>Service / Package</th>
              <th>Date & Time</th>
              <th>Action</th>
            </tr>
          </thead>
          <tbody>
            <!-- Dynamic rows inserted here -->
          </tbody>
        </table>
      </div>
    </div>

    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const API_URL = "https://bayleaf.onrender.com";
        console.log("Page loaded, fetching appointments...");
        fetchAppointments();

        async function fetchAppointments() {
          try {
            const res = await fetch(`${API_URL}/api/outlets/appointments`);
            const data = await res.json();
            console.log("Raw response from backend:", data);

            const appointments = data.appointments || [];
            console.log(`Rendering ${appointments.length} appointments...`);

            const tbody = document.querySelector("#appointmentsTable tbody");
            tbody.innerHTML = "";

            if (appointments.length === 0) {
              tbody.innerHTML =
                '<tr><td colspan="4" class="text-center text-muted">No appointments found.</td></tr>';
              return;
            }

            appointments.forEach((appt, i) => {
              const {
                _id: appointmentId,
                customerName,
                appointmentDate,
                appointmentTime,
                remarks,
                services = [],
                packages = [],
              } = appt;

              console.log(`Appointment ${i + 1}: ${customerName}`);
              const dateStr = new Date(appointmentDate).toLocaleDateString();
              const timeStr = appointmentTime;

              // Render direct services
              services
                .filter((s) => s.status === "Not Assigned")
                .forEach((s, j) => {
                const name = s.service?.serviceName || "[Service]";
                const isAssigned = [
                  "Assigned",
                  "In Progress",
                  "Completed",
                  "Cancelled",
                ].includes(s.status);
                console.log(`→ Direct Service ${j + 1}: ${name}`);

                const row = `
                <tr>
                  <td>${customerName}</td>
                  <td>${name} - ${remarks || "None"}</td>
                  <td>${dateStr} ${timeStr}</td>
                  <td>
                    ${
                      isAssigned
                        ? '<span class="badge bg-success">Assigned</span>'
                        : `<button class="btn btn-sm btn-outline-primary" data-appt="${appointmentId}" data-id="${s._id}" data-type="direct">Take Job</button>`
                    }
                  </td>
                </tr>
              `;
                tbody.insertAdjacentHTML("beforeend", row);
              });

              // Render packages (just name)
              packages
                .filter((pkg) => pkg.status === "Not Assigned")
                .forEach((pkg, k) => {
                const pkgName = pkg.package?.packageName || "[Package]";
                const isAssigned = [
                  "Assigned",
                  "In Progress",
                  "Completed",
                  "Cancelled",
                ].includes(pkg.status);
                console.log(`→ Package ${k + 1}: ${pkgName}`);

                const row = `
                <tr>
                  <td>${customerName}</td>
                  <td>${pkgName} - ${remarks || "None"}</td>

                  <td>${dateStr} ${timeStr}</td>
                  <td>
                    ${
                      isAssigned
                        ? '<span class="badge bg-success">Assigned</span>'
                        : `<button class="btn btn-sm btn-outline-primary" data-appt="${appointmentId}" data-id="${pkg._id}" data-type="package">Take Job</button>`
                    }
                  </td>
                </tr>
              `;
                tbody.insertAdjacentHTML("beforeend", row);
              });
            });
          } catch (err) {
            console.error("Error fetching appointments:", err);
            const tbody = document.querySelector("#appointmentsTable tbody");
            tbody.innerHTML =
              '<tr><td colspan="4" class="text-danger text-center">Failed to load appointments.</td></tr>';
          }
        }

        // Handle "Take Job" button click
        document
          .querySelector("#appointmentsTable")
          .addEventListener("click", async (e) => {
            if (
              e.target.tagName === "BUTTON" &&
              e.target.innerText === "Take Job"
            ) {
              const btn = e.target;
              const appointmentId = btn.dataset.appt;
              const itemId = btn.dataset.id;
              const itemType = btn.dataset.type;

              console.log(
                `→ Take Job clicked. appt: ${appointmentId}, id: ${itemId}, type: ${itemType}`
              );

              try {
                const res = await fetch(`${API_URL}/api/staff/assign-service`, {
                  method: "PATCH",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    appointmentId,
                    itemId,
                    itemType,
                  }),
                });

                if (res.ok) {
                  console.log("✔ Service/Package assignment successful");
                  fetchAppointments();
                } else {
                  const errText = await res.text();
                  alert("Error: " + errText);
                  console.error("❌ Backend error:", errText);
                }
              } catch (error) {
                alert("Something went wrong!");
                console.error("❌ Exception:", error);
              }
            }
          });
      });
    </script>
  </body>
</html>
