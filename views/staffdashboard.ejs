<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>Staff Dashboard</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.css"
      rel="stylesheet"
    />

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <!-- Include FullCalendar CSS and JS -->
    <script src="https://cdn.jsdelivr.net/npm/fullcalendar@5.11.3/main.min.js"></script>
    <style>
      .charts-wrapper {
        display: flex;
        flex-wrap: wrap;
        justify-content: space-between;
        height: 35vh;
        margin-left: 20px;
        margin-right: 20px;
      }

      .chart-container,
      .ranking-container {
        position: relative;
        background: white;
        padding: 10px;
        border-radius: 12px;
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.2);
        width: 30%;
        min-width: 300px;
        height: 100%;
        overflow: hidden;
        display: flex;
        flex-direction: column;
      }

      .chart-container canvas {
        flex-grow: 1;
        max-height: calc(
          100% - 2.2rem
        ); /* Subtract space for heading and padding */
      }

      .chart-container h3 {
        font-size: 1rem;
        margin: 0 0 6px;
        text-align: center;
      }

      .ranking-container h3 {
        font-size: 1rem;
        margin: 0 0 6px;
        text-align: center;
      }

      #staffRankings {
        overflow-y: auto;
        flex-grow: 1;
        padding-right: 5px;
      }

      .ranking-card {
        margin-bottom: 8px;
        padding: 8px;
        background-color: #f9f9f9;
        border-radius: 6px;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
      }

      .ranking-card h5 {
        font-size: 0.85rem;
        font-weight: bold;
        color: #663399;
        margin-bottom: 4px;
      }

      .ranking-card p {
        font-size: 0.75rem;
        color: #555;
        margin: 0;
      }

      .top-left-arrow,
      .top-right-arrow {
        position: absolute;
        top: 10px;
        font-size: 22px;
        color: #663399;
        cursor: pointer;
        background: none;
        border: none;
        padding: 0;
      }

      .top-left-arrow {
        left: 15px;
      }

      .top-right-arrow {
        right: 15px;
      }

      /* For smaller screens, adjust layout */
      @media (max-width: 767px) {
        .charts-wrapper {
          flex-direction: column;
          align-items: center;
        }

        .chart-container,
        .ranking-container {
          width: 80%; /* Make the charts and ranking section wider on smaller screens */
          margin-bottom: 20px;
        }

        /* Adjust chart sizes for smaller screens */
        canvas {
          width: 100% !important; /* Ensure charts fit within their container */
          height: auto !important;
        }
      }

      /* Sidebar and main content styles */
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100vh;
        background-color: #f8f9fa;
        border-right: 1px solid #dee2e6;
        padding: 20px 0;
        z-index: 1000;
      }

      .main-content {
        margin-left: 250px; /* Offset by sidebar width */
        padding: 20px;
        background-color: #fff;
        min-height: 100vh;
        overflow-x: hidden; /* Ensure no horizontal scroll */
      }
    </style>
    <style>
      .fc-event {
        cursor: pointer;
        margin-bottom: 2px;
      }
      .badge {
        font-size: 0.7em;
      }
      .ranking-card {
        transition: transform 0.2s;
      }
    </style>
    <style>
      /* Calendar Styles */
      .fc {
        font-family: inherit;
      }

      .fc-header-toolbar {
        margin-bottom: 0.5em;
      }

      .fc-toolbar-title {
        font-size: 1rem;
        color: #663399 !important;
        font-weight: 600;
      }

      .fc-button {
        background-color: #f5f0fa !important;
        border: 1px solid #d9c2f0 !important;
        color: #663399 !important;
        transition: all 0.2s;
        padding: 0.3em 0.6em;
        font-size: 0.85rem;
      }

      .fc-button:hover {
        background-color: #e9d8fd !important;
        color: #5a2d8a !important;
      }

      .fc-button-primary:not(:disabled).fc-button-active {
        background-color: #663399 !important;
        border-color: #5a2d8a !important;
        color: white !important;
      }

      .fc-button-primary:disabled {
        background-color: #f5f0fa !important;
        border-color: #e9d8fd !important;
        color: #a78bc9 !important;
      }

      .fc-daygrid-day-number,
      .fc-col-header-cell-cushion {
        color: #663399 !important;
        text-decoration: none;
      }

      /* Today's date styling - consolidated and made more specific */
      .fc .fc-daygrid-day.fc-day-today {
        background-color: #9370db !important;
      }

      .fc .fc-daygrid-day.fc-day-today .fc-daygrid-day-number {
        color: white !important;
        font-weight: bold;
      }

      /* Selected date styling - made more specific */
      .fc .fc-daygrid-day.fc-day-selected {
        background-color: #d8bfd8 !important;
      }

      .fc-event {
        background-color: #8e44ad !important;
        border-color: #7d3c98 !important;
        color: white !important;
        cursor: pointer;
        margin-bottom: 2px;
        border-radius: 3px;
        padding: 1px 3px;
        font-size: 0.8em;
      }

      .fc-event:hover {
        background-color: #7d3c98 !important;
      }

      .fc-daygrid-event-dot {
        border-color: white !important;
      }

      .fc-daygrid-day:hover {
        background-color: #f9f5ff !important;
      }

      .fc-col-header-cell {
        background-color: #f5f0fa !important;
      }
      /* Today's Jobs Styles */
      .todays-jobs-container {
        background: white;
        padding: 15px;
        border-radius: 12px;
        box-shadow: 0 0 25px rgba(0, 0, 0, 0.2);
      }

      .todays-jobs-container h4 {
        font-size: 1rem;
        margin-bottom: 12px;
        color: #663399;
        font-weight: 600;
      }

      #todaysJobsList {
        font-size: 0.85rem;
        list-style-type: none;
        padding: 0;
        max-height: 250px;
        overflow-y: auto;
      }

      #todaysJobsList li {
        margin-bottom: 10px;
        padding: 10px;
        background-color: #f9f5ff;
        border-radius: 8px;
        border-left: 3px solid #8e44ad;
      }

      #todaysJobsList li:hover {
        background-color: #f0e5ff;
      }

      #todaysJobsList .badge {
        font-size: 0.7em;
        background-color: #663399;
      }

      #todaysJobsList strong {
        color: #5a2d8a;
      }

      #todaysJobsList small.text-muted {
        color: #8e44ad !important;
        display: block;
        margin-top: 5px;
      }

      /* Status Badges */
      .bg-success {
        background-color: #5a2d8a !important;
      }

      .bg-warning {
        background-color: #9b59b6 !important;
        color: white !important;
      }

      .bg-primary {
        background-color: #8e44ad !important;
      }

      .bg-danger {
        background-color: #6c3483 !important;
      }

      .bg-secondary {
        background-color: #a569bd !important;
      }

      /* Scrollbar styling */
      ::-webkit-scrollbar {
        width: 6px;
      }

      ::-webkit-scrollbar-track {
        background: #f1f1f1;
        border-radius: 3px;
      }

      ::-webkit-scrollbar-thumb {
        background: #c39bd3;
        border-radius: 3px;
      }

      ::-webkit-scrollbar-thumb:hover {
        background: #a569bd;
      }
    </style>
  </head>

  <body>
    <%- include('adminpanel') %>
    <div class="main-content pt-5 mb-5">
      <div class="charts-wrapper">
        <!-- Job Status Bar Chart -->
        <div class="chart-container position-relative">
          <span
            class="top-left-arrow position-absolute top-50 start-0 translate-middle-y p-2"
            onclick="navigateJobStatusChart('prev')"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="30"
              height="30"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#663399"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M15 18l-6-6 6-6" />
            </svg>
          </span>
          <span
            class="top-right-arrow position-absolute top-50 end-0 translate-middle-y p-2"
            onclick="navigateJobStatusChart('next')"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="30"
              height="30"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#663399"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M9 18l6-6-6-6" />
            </svg>
          </span>
          <h3 class="text-center" id="monthLabel">Job Status Overview</h3>
          <canvas id="jobStatusChart" width="600" height="400"></canvas>
        </div>

        <!-- Job Completion Trend Line Chart -->
        <div class="chart-container">
          <span
            class="top-left-arrow position-absolute top-50 start-0 translate-middle-y p-2"
            onclick="navigateJobTrendChart('prev')"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="30"
              height="30"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#663399"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M15 18l-6-6 6-6" />
            </svg>
          </span>
          <span
            class="top-right-arrow position-absolute top-50 end-0 translate-middle-y p-2"
            onclick="navigateJobTrendChart('next')"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="30"
              height="30"
              viewBox="0 0 24 24"
              fill="none"
              stroke="#663399"
              stroke-width="2"
              stroke-linecap="round"
              stroke-linejoin="round"
            >
              <path d="M9 18l6-6-6-6" />
            </svg>
          </span>
          <h3 class="text-center" id="trendMonthLabel">Daily Completed Jobs</h3>
          <canvas id="jobTrendChart" width="600" height="400"></canvas>
        </div>

        <!-- Staff Rankings -->
        <div class="ranking-container">
          <h3 class="text-center">Staff Rankings</h3>
          <div id="staffRankings">
            <!-- Dynamically generated staff ranking cards will appear here -->
          </div>
        </div>
      </div>
      <div
        class="below-charts d-flex flex-wrap justify-content-between px-3 mt-4"
      >
        <!-- Calendar -->
        <div
          class="calendar-container"
          style="
            flex: 0 0 calc(66.66% - 10px);
            background: white;
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 0 25px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
          "
        >
          <h4 style="font-size: 1rem; margin-bottom: 12px">Calendar</h4>
          <div id="calendar" style="height: 250px"></div>
        </div>

        <!-- Today's Jobs -->
        <div
          class="todays-jobs-container"
          style="
            flex: 0 0 calc(33.33% - 10px);
            background: white;
            padding: 15px;
            border-radius: 12px;
            box-shadow: 0 0 25px rgba(0, 0, 0, 0.2);
            margin-bottom: 20px;
          "
        >
          <h4 style="font-size: 1rem; margin-bottom: 12px">My Job Schedule</h4>
          <ul
            id="todaysJobsList"
            style="
              font-size: 0.85rem;
              padding-left: 20px;
              list-style-type: none;
              padding: 0;
            "
          >
            <!-- Jobs will be dynamically inserted here -->
          </ul>
        </div>
      </div>
    </div>

    <script>
      const API_URL = "https://bayleaf.onrender.com";
      let currentStatusChartMonth = new Date(); // Separate month for status chart
      let currentTrendChartMonth = new Date(); // Separate month for trend chart
      let userId;
      let allJobs = []; // Store all jobs data here
      let jobChart, trendChart;
      let calendar; // For FullCalendar instance
      let currentStaffRankings = []; // Store staff rankings

      document.addEventListener("DOMContentLoaded", async () => {
        await initializeDashboard();
      });

      async function initializeDashboard() {
        try {
          // 1. First get the user ID
          await getUserId();

          // 2. Only proceed if we have a userId
          if (userId) {
            // 3. Fetch initial job data
            await fetchAllJobData(userId);

            // 4. Initialize charts with current month data
            updateJobStatusChart(currentStatusChartMonth);
            updateJobTrendChart(currentTrendChartMonth);

            // 5. Initialize calendar (now that we have userId)
            initializeCalendar();

            // 6. Fetch today's jobs
            const todayStr = new Date().toISOString().split("T")[0];
            fetchJobsForDate(todayStr);

            // 7. Fetch staff rankings (only once, not tied to month)
            fetchStaffRankings();
          } else {
            console.error("User ID not available");
            // Handle case where user ID couldn't be fetched
          }
        } catch (error) {
          console.error("Initialization error:", error);
        }
      }

      async function getUserId() {
        try {
          const res = await fetch(`${API_URL}/api/userRole`);
          const data = await res.json();

          if (data.success && data.userId) {
            userId = data.userId;
            console.log("✅ Logged-in User ID:", userId);
          } else {
            console.warn("⚠️ Couldn't get userId");
            throw new Error("User ID not available");
          }
        } catch (err) {
          console.error("❌ Failed to fetch userRole:", err);
          throw err;
        }
      }

      async function fetchAllJobData(userId) {
        try {
          const response = await fetch(
            `${API_URL}/api/staff/my-jobs/${userId}`
          );
          const jobData = await response.json();
          allJobs = jobData.jobs; // Store all fetched jobs
        } catch (err) {
          console.error("❌ Failed to fetch job data:", err);
        }
      }

      function updateJobStatusChart(month) {
        const filteredJobs = allJobs.filter((job) => {
          const jobDate = new Date(job.date);
          return (
            jobDate.getFullYear() === month.getFullYear() &&
            jobDate.getMonth() === month.getMonth()
          );
        });

        const statusCounts = {};
        filteredJobs.forEach((job) => {
          const status = job.status || "Unknown";
          statusCounts[status] = (statusCounts[status] || 0) + 1;
        });

        const labels = Object.keys(statusCounts);
        const data = Object.values(statusCounts);

        // Update month label
        const label = month.toLocaleString("default", {
          month: "long",
          year: "numeric",
        });
        document.getElementById(
          "monthLabel"
        ).textContent = `Job Status Overview – ${label}`;

        // Update job status chart
        if (jobChart) jobChart.destroy();
        const ctx = document.getElementById("jobStatusChart").getContext("2d");
        jobChart = new Chart(ctx, {
          type: "bar",
          data: {
            labels: labels,
            datasets: [
              {
                label: "Number of Jobs",
                data: data,
                backgroundColor: [
                  "#663399",
                  "#9370DB",
                  "#A569BD",
                  "#48C9B0",
                  "#F39C12",
                  "#E74C3C",
                ],
                borderRadius: 5,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: {
                display: false,
              },
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: {
                  stepSize: 1,
                },
              },
            },
          },
        });
      }

      function updateJobTrendChart(month) {
        const filteredJobs = allJobs.filter((job) => {
          const jobDate = new Date(job.date);
          return (
            jobDate.getFullYear() === month.getFullYear() &&
            jobDate.getMonth() === month.getMonth()
          );
        });

        const completedPerDay = {};
        filteredJobs.forEach((job) => {
          if (job.status === "Completed") {
            const day = new Date(job.date).getDate();
            completedPerDay[day] = (completedPerDay[day] || 0) + 1;
          }
        });

        const daysInMonth = new Date(
          month.getFullYear(),
          month.getMonth() + 1,
          0
        ).getDate();
        const trendLabels = Array.from(
          { length: daysInMonth },
          (_, i) => i + 1
        );
        const trendData = trendLabels.map((day) => completedPerDay[day] || 0);

        // Update month label for trend chart
        const trendLabel = month.toLocaleString("default", {
          month: "long",
          year: "numeric",
        });
        document.getElementById(
          "trendMonthLabel"
        ).textContent = `Daily Completed Jobs – ${trendLabel}`;

        // Update trend chart
        if (trendChart) trendChart.destroy();
        const trendCtx = document
          .getElementById("jobTrendChart")
          .getContext("2d");
        trendChart = new Chart(trendCtx, {
          type: "line",
          data: {
            labels: trendLabels,
            datasets: [
              {
                label: "Completed Jobs",
                data: trendData,
                borderColor: "#663399",
                backgroundColor: "rgba(102, 51, 153, 0.1)",
                tension: 0.3,
                pointRadius: 4,
                fill: true,
              },
            ],
          },
          options: {
            responsive: true,
            plugins: {
              legend: { display: true },
            },
            scales: {
              y: {
                beginAtZero: true,
                ticks: { stepSize: 1 },
              },
            },
          },
        });
      }

      function formatMonth(month) {
        const year = month.getFullYear();
        const monthNumber = month.getMonth() + 1;
        return `${year}-${monthNumber < 10 ? "0" : ""}${monthNumber}`;
      }

      function navigateJobStatusChart(direction) {
        currentStatusChartMonth.setMonth(
          currentStatusChartMonth.getMonth() + (direction === "next" ? 1 : -1)
        );
        updateJobStatusChart(currentStatusChartMonth);
      }

      function navigateJobTrendChart(direction) {
        currentTrendChartMonth.setMonth(
          currentTrendChartMonth.getMonth() + (direction === "next" ? 1 : -1)
        );
        updateJobTrendChart(currentTrendChartMonth);
      }

      // Fetch staff rankings based on the current month
      async function fetchStaffRankings() {
        try {
          const currentMonth = new Date().toISOString().slice(0, 7); // Get current month in YYYY-MM format
          const response = await fetch(
            `${API_URL}/api/staff/job-rankings?month=${currentMonth}`
          );
          const data = await response.json();

          if (data.success) {
            currentStaffRankings = data.staffRankings;
            console.log(currentStaffRankings);
            displayStaffRankings(currentStaffRankings);
          } else {
            console.log("Failed to fetch staff rankings");
            displayStaffRankings([]); // Show empty state
          }
        } catch (error) {
          console.error("Error fetching staff rankings:", error);
          displayStaffRankings([]); // Show empty state
        }
      }

      function displayStaffRankings(staffRankings) {
        const staffContainer = document.getElementById("staffRankings");
        staffContainer.innerHTML = "";

        if (staffRankings.length === 0) {
          staffContainer.innerHTML = "<p>No staff rankings available</p>";
          return;
        }

        staffRankings.forEach((staff, index) => {
          const card = document.createElement("div");
          card.classList.add("ranking-card");
          card.style.marginBottom = "10px";
          card.style.padding = "10px";
          card.style.borderRadius = "8px";
          card.style.backgroundColor = "#f8f9fa";

          let rankEmoji = "";
          if (index === 0) {
            rankEmoji = "🥇"; // Gold medal for 1st place
            card.style.border = "2px solid gold";
          } else if (index === 1) {
            rankEmoji = "🥈"; // Silver medal for 2nd place
            card.style.border = "2px solid silver";
          } else if (index === 2) {
            rankEmoji = "🥉"; // Bronze medal for 3rd place
            card.style.border = "2px solid #cd7f32"; // bronze color
          } else {
            card.style.border = "1px solid #dee2e6";
          }

          card.innerHTML = `
      <h5 style="margin: 0;">Rank ${index + 1}: ${rankEmoji} ${
            staff.staffName
          }</h5>
      <p style="margin: 5px 0 0 0;">Completed Jobs: ${staff.completedJobs}</p>
    `;
          staffContainer.appendChild(card);
        });
      }
      function initializeCalendar() {
        const calendarEl = document.getElementById("calendar");
        let selectedDate = null;

        calendar = new FullCalendar.Calendar(calendarEl, {
          initialView: "dayGridMonth",
          headerToolbar: {
            left: "prev,next today",
            center: "title",
            right: "dayGridMonth,timeGridWeek,timeGridDay",
          },
          height: "auto",
          dateClick: function (info) {
            // Remove previous selection
            if (selectedDate) {
              const prevSelected = document.querySelector(".fc-day-selected");
              if (prevSelected)
                prevSelected.classList.remove("fc-day-selected");
            }

            // Add selection to clicked date
            info.dayEl.classList.add("fc-day-selected");
            selectedDate = info.dateStr;

            fetchJobsForDate(info.dateStr);
          },
          events: async function (fetchInfo, successCallback, failureCallback) {
            try {
              const response = await fetch(
                `${API_URL}/api/staff/my-jobs/${userId}`
              );
              const data = await response.json();

              const events = data.jobs.map((job) => ({
                title: `${job.name} - ${job.customer}`,
                start: new Date(job.date).toISOString().split("T")[0],
                allDay: true,
                extendedProps: {
                  time: job.time,
                  status: job.status,
                },
              }));
              successCallback(events);
            } catch (error) {
              console.error("Error fetching calendar events:", error);
              failureCallback(error);
            }
          },
          eventContent: function (arg) {
            const eventEl = document.createElement("div");
            eventEl.innerHTML = `
        <div style="font-size: 0.8em; padding: 2px; white-space: nowrap; overflow: hidden; text-overflow: ellipsis;">
          <strong>${arg.timeText}</strong> ${arg.event.title}
          <span class="badge ${getStatusBadgeClass(
            arg.event.extendedProps.status
          )}">
            ${arg.event.extendedProps.status}
          </span>
        </div>
      `;
            return { domNodes: [eventEl] };
          },
        });

        calendar.render();

        // Highlight today's date by default and load today's jobs
        const todayStr = new Date().toISOString().split("T")[0];
        fetchJobsForDate(todayStr);
      }

      async function fetchJobsForDate(dateStr) {
        try {
          const response = await fetch(
            `${API_URL}/api/staff/my-jobs/${userId}`
          );
          const data = await response.json();
          const jobsList = document.getElementById("todaysJobsList");
          jobsList.innerHTML = "";

          const filteredJobs = data.jobs.filter((job) => {
            const jobDate = new Date(job.date).toISOString().split("T")[0];
            return jobDate === dateStr;
          });

          if (filteredJobs.length === 0) {
            jobsList.innerHTML = "<li>No jobs scheduled for this date</li>";
            return;
          }

          filteredJobs.sort((a, b) => a.time.localeCompare(b.time));

          filteredJobs.forEach((job) => {
            const li = document.createElement("li");
            li.className = "mb-2";
            li.innerHTML = `
              <div class="d-flex justify-content-between align-items-center">
                <div>
                  <strong>${job.time}</strong> - ${job.customer}<br>
                  ${job.name}
                </div>
                <span class="badge ${getStatusBadgeClass(job.status)}">
                  ${job.status}
                </span>
              </div>
              ${
                job.remarks
                  ? `<small class="text-muted">Remarks: ${job.remarks}</small>`
                  : ""
              }
              <hr class="my-1">
            `;
            jobsList.appendChild(li);
          });
        } catch (error) {
          console.error("Error fetching jobs:", error);
          document.getElementById("todaysJobsList").innerHTML =
            "<li>Error loading jobs</li>";
        }
      }

      function getStatusBadgeClass(status) {
        switch (status.toLowerCase()) {
          case "completed":
            return "bg-success";
          case "in progress":
            return "bg-warning text-dark";
          case "assigned":
            return "bg-primary";
          case "cancelled":
            return "bg-danger";
          default:
            return "bg-secondary";
        }
      }
    </script>
  </body>
</html>
