<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Salon Appointment Booking</title>

    <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

    <link
      rel="stylesheet"
      href="https://code.getmdl.io/1.3.0/material.cyan-teal.min.css"
    />
    <!-- Flatpickr CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
    />
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      .cart-item {
        margin-bottom: 10px; /* Adds space between items */
        padding: 10px; /* Optional: Adds padding to the item */
        border-bottom: 1px solid #ddd; /* Optional: Adds a thin line between items */
      }
    </style>
  </head>
  <body>
    <%- include('../views/navbar') %>
    <div class="container mt-5">
      <h2>Book an Appointment</h2>

      <!-- Search Bar and Category Panel -->
      <div class="d-flex position-relative">
        <input
          type="text"
          class="form-control me-2"
          id="search"
          placeholder="Search services and packages"
        />
        <button class="btn btn-primary" id="searchButton">Search</button>
      </div>

      <div class="row mt-4">
        <div class="col-3">
          <div class="list-group" id="categoryPanel">
            <!-- Categories will be dynamically added here -->
          </div>
        </div>
        <div class="col-6">
          <div class="row" id="servicesAndPackages">
            <!-- Services and packages will be dynamically displayed here -->
          </div>
        </div>
        <!-- Cart Section -->
        <div class="col-3">
          <h4>Cart</h4>
          <div
            id="cartItems"
            class="border p-3 rounded"
            style="max-height: 400px; overflow-y: auto"
          >
            <!-- Selected items will appear here dynamically -->
          </div>
        </div>
      </div>
      <div class="mt-4">
        <textarea
          class="form-control mb-3"
          id="remarks"
          placeholder="Add remarks (if any)"
        ></textarea>

        <div class="row">
          <div class="col-md-4">
            <label for="outlet">Select Outlet:</label>
            <select class="form-select" id="outlet">
              <!-- Outlets will be dynamically added here -->
            </select>
          </div>

          <div class="col-md-4">
            <label for="appointmentDate">Select Date</label>
            <input
              type="text"
              id="appointmentDate"
              class="form-control"
              placeholder="Pick a date"
            />
          </div>

          <div class="col-md-4">
            <label for="appointmentTime">Appointment Time</label>
            <input
              type="text"
              class="form-control"
              id="appointmentTime"
              readonly
            />
          </div>
        </div>
      </div>
    </div>

    <div class="text-center mt-4">
      <button class="btn btn-success w-50 mx-auto" id="bookAppointment">
        Book Appointment
      </button>
    </div>

    <!-- Payment Option Modal -->
    <div
      class="modal fade"
      id="paymentModal"
      tabindex="-1"
      role="dialog"
      aria-labelledby="paymentModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="paymentModalLabel">
              Choose Payment Option
            </h5>
          </div>
          <div class="modal-body">
            <p>Would you like to pay now or later?</p>
            <button type="button" class="btn btn-success" id="payNowBtn">
              Pay Now
            </button>
            <button type="button" class="btn btn-secondary" id="payLaterBtn">
              Pay Later
            </button>
          </div>
        </div>
      </div>
    </div>
    <%- include('../views/footer') %>
    <!-- Load the time picker script -->
    <script src="/js/analogue-time-picker/analogue-time-picker.min.js"></script>
    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <!-- Init -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const input = document.getElementById("appointmentTime");
        window.timePickerInput({
          inputElement: input,
          theme: "light", // or 'dark'
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        flatpickr("#appointmentDate", {
          dateFormat: "Y-m-d", // Customize format if needed
          minDate: "today",
        });
      });
    </script>

    <script>
      const API_URL = "http://localhost:5000";

      document.addEventListener("DOMContentLoaded", async () => {
        let userId = null;

        // Fetch userId and role
        async function fetchUserId() {
          try {
            const userRoleResponse = await fetch(`${API_URL}/api/userRole`, {
              credentials: "include",
            });
            const { role, userId: fetchedUserId } =
              await userRoleResponse.json();

            if (role === "customer") {
              userId = fetchedUserId;
              console.log("User ID:", userId);
              // Load categories, outlets, and cart after fetching userId
              await loadCategories();
              await loadOutlets();
              await loadCart();
            } else {
              alert("You must be logged in as a customer to access this page.");
              window.location.href = "/login"; // Redirect to login if not a customer
            }
          } catch (error) {
            console.error("Error fetching user role and ID:", error);
            alert("Unable to fetch user information. Please try again.");
          }
        }

        // Add to cart
        window.addToCart = async function addToCart(itemId, type) {
          try {
            const response = await fetch(`${API_URL}/api/cart/add`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ userId, itemId, type }),
            });

            if (response.ok) {
              const result = await response.json();
              alert("Item added to cart!");
              console.log("Cart:", result.cart);
              loadCart(); // Refresh cart
            } else {
              const error = await response.json();
              alert(`Failed to add to cart: ${error.message}`);
            }
          } catch (error) {
            console.error("Error adding to cart:", error);
            alert("An error occurred while adding to the cart.");
          }
        };

        // Remove from cart
        window.removeFromCart = async function removeFromCart(itemId, type) {
          try {
            const response = await fetch(`${API_URL}/api/cart/remove`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ userId, itemId, type }),
            });

            if (response.ok) {
              const result = await response.json();
              alert("Item removed from cart!");
              console.log("Cart:", result.cart);
              loadCart(); // Refresh cart
            } else {
              const error = await response.json();
              alert(`Failed to remove from cart: ${error.message}`);
            }
          } catch (error) {
            console.error("Error removing from cart:", error);
            alert("An error occurred while removing from the cart.");
          }
        };

        async function loadCart() {
          try {
            const response = await fetch(`${API_URL}/api/cart/${userId}`);
            console.log("Cart fetch status:", response.status);

            if (response.ok) {
              const cart = await response.json();
              displayCart(cart);
            } else if (response.status === 404) {
              // Show empty cart if not found
              displayCart({ services: [], packages: [] });
            } else {
              alert("Failed to load cart");
            }
          } catch (error) {
            console.error("Error loading cart:", error);
          }
        }

        function displayCart(cart) {
          const cartItems = document.getElementById("cartItems");
          cartItems.innerHTML = "";

          const isCartEmpty =
            (!cart.services || cart.services.length === 0) &&
            (!cart.packages || cart.packages.length === 0);

          if (isCartEmpty) {
            const noItemsMessage = document.createElement("div");
            noItemsMessage.className = "cart-item";
            noItemsMessage.innerHTML = "Your cart is empty!";
            cartItems.appendChild(noItemsMessage);
            return;
          }

          // Display service items
          if (cart.services && cart.services.length > 0) {
            const serviceHeader = document.createElement("h3");
            serviceHeader.textContent = "Services";
            cartItems.appendChild(serviceHeader);

            cart.services.forEach((item) => {
              const serviceItem = document.createElement("div");
              serviceItem.className = "cart-item";

              const name = item?.service?.serviceName || "Unnamed Service";
              const price = item?.service?.price || 0;

              serviceItem.textContent = `Service: ${name} | Price: â‚¹${price}`;
              cartItems.appendChild(serviceItem);
            });
          }

          // Display package items
          if (cart.packages && cart.packages.length > 0) {
            const packageHeader = document.createElement("h3");
            packageHeader.textContent = "Packages";
            cartItems.appendChild(packageHeader);

            cart.packages.forEach((item) => {
              const packageItem = document.createElement("div");
              packageItem.className = "cart-item";

              const name = item?.package?.packageName || "Unnamed Package";
              const price = item?.package?.price || 0;

              packageItem.textContent = `Package: ${name} | Price: â‚¹${price}`;
              cartItems.appendChild(packageItem);
            });
          }
        }

        // Function to load categories
        async function loadCategories() {
          try {
            const response = await fetch(`${API_URL}/api/categories`);
            const categories = await response.json();
            const categoryPanel = document.getElementById("categoryPanel");

            // Ensure categories is an array before proceeding
            if (Array.isArray(categories)) {
              categories.forEach((category, index) => {
                const button = document.createElement("button");
                button.classList.add(
                  "list-group-item",
                  "list-group-item-action"
                );
                button.textContent = category; // category is a string now

                // Add click event to highlight the clicked category
                button.addEventListener("click", () => {
                  highlightCategory(button, category);
                  loadServicesByCategory(category);
                });

                // Append the button to the panel
                categoryPanel.appendChild(button);

                // Automatically click the first category when the page loads
                if (index === 0) {
                  highlightCategory(button, category);
                  loadServicesByCategory(category);
                }
              });
            } else {
              console.error("Categories data is not an array:", categories);
            }
          } catch (error) {
            console.error("Error loading categories:", error);
          }
        }

        // Function to highlight the clicked category
        function highlightCategory(button, category) {
          const buttons = document.querySelectorAll(
            "#categoryPanel .list-group-item"
          );

          // Remove highlight from all categories
          buttons.forEach((btn) => btn.classList.remove("active"));

          // Add highlight to the clicked category
          button.classList.add("active");
        }

        // Function to load outlets
        async function loadOutlets() {
          try {
            const response = await fetch(`${API_URL}/api/outlets`);
            const result = await response.json();
            // Access the `data` array
            const outlets = result.data;
            const outletSelect = document.getElementById("outlet");

            outlets.forEach((outlet) => {
              const option = document.createElement("option");
              option.value = outlet.id;
              option.textContent = `${outlet.name} - ${outlet.fullAddress}`; // Display name and address
              outletSelect.appendChild(option);
            });
          } catch (error) {
            console.error("Error loading outlets:", error);
          }
        }

        // Function to search services and packages
        async function searchServicesAndPackages(query) {
          try {
            // Fetch services and packages
            const responseServices = await fetch(
              `${API_URL}/api/services?search=${query}`
            );
            const servicesResult = await responseServices.json();

            const responsePackages = await fetch(
              `${API_URL}/api/packages?search=${query}`
            );
            const packagesResult = await responsePackages.json();

            // Check if 'data' exists and is an array in both responses
            const services = Array.isArray(servicesResult.data)
              ? servicesResult.data
              : [];
            const packages = Array.isArray(packagesResult.data)
              ? packagesResult.data
              : [];

            // If both services and packages are arrays, call the display function
            if (services.length > 0 || packages.length > 0) {
              displayServicesAndPackages(services, packages); // Pass the arrays to the display function
            } else {
              console.error("No services or packages found.");
            }
          } catch (error) {
            console.error("Error fetching services or packages:", error);
          }
        }

        // Function to load services by category
        async function loadServicesByCategory(category) {
          try {
            // Fetch services by category from the backend
            const responseServices = await fetch(
              `${API_URL}/api/services/category/${category}`
            );
            const servicesResult = await responseServices.json();
            console.log(servicesResult);
            // Check if 'data' exists and is an array
            const services = Array.isArray(servicesResult)
              ? servicesResult
              : [];

            // Fetch packages by category from the backend
            const responsePackages = await fetch(
              `${API_URL}/api/packages/category/${category}`
            );
            const packagesResult = await responsePackages.json();
            console.log(packagesResult);
            // Check if 'data' exists and is an array
            const packages = Array.isArray(packagesResult)
              ? packagesResult
              : [];
            console.log(services, packages);
            // Display the filtered services and packages
            displayServicesAndPackages(services, packages);
          } catch (error) {
            console.error("Error fetching services or packages:", error);
          }
        }

        // Function to display services and packages
        function displayServicesAndPackages(services, packages) {
          const servicesAndPackages = document.getElementById(
            "servicesAndPackages"
          );
          servicesAndPackages.innerHTML = "";

          services.forEach((service) => {
            const col = document.createElement("div");
            col.classList.add("col-3");
            col.innerHTML = `
            <div class="card">
                <img src="${service.imageUrl}" class="card-img-top" alt="${service.serviceName}">
                <div class="card-body">
                    <h5 class="card-title">${service.serviceName}</h5>
                    <p class="card-text">â‚¹${service.price}</p>
                    <button class="btn btn-primary" onclick="addToCart('${service._id}', 'service')">Add to Cart</button>
                </div>
            </div>
        `;
            servicesAndPackages.appendChild(col);
          });

          packages.forEach((pkg) => {
            const col = document.createElement("div");
            col.classList.add("col-3");
            col.innerHTML = `
            <div class="card">
                <img src="${pkg.imageUrl}" class="card-img-top" alt="${pkg.packageName}">
                <div class="card-body">
                    <h5 class="card-title">${pkg.packageName}</h5>
                    <p class="card-text">â‚¹${pkg.price}</p>
                    <button class="btn btn-primary" onclick="addToCart('${pkg._id}', 'package')">Add to Cart</button>
                </div>
            </div>
        `;
            servicesAndPackages.appendChild(col);
          });
        }

        // Function to handle the appointment booking
        async function bookAppointment() {
          // Fetch the cart data from the API
          const cartresponse = await fetch(`${API_URL}/api/cart/${userId}`);
          if (!cartresponse.ok) {
            alert("Failed to retrieve cart data.");
            return;
          }

          const cartData = await cartresponse.json();

          // Assuming the cart data contains arrays of services and packages:
          const services = cartData.services || []; // Default to an empty array if no services
          const packages = cartData.packages || []; // Default to an empty array if no packages

          const remarks = document.getElementById("remarks").value;
          const appointmentDate =
            document.getElementById("appointmentDate").value;
          const appointmentTime =
            document.getElementById("appointmentTime").value;
          const outlet = document.getElementById("outlet").value;
          const price = await calculateTotalPrice(); // Assume a function to calculate total price

          if (!outlet || !appointmentDate || !appointmentTime) {
            alert("Please select all required fields: outlet, date, and time.");
            return;
          }
          const response = await fetch(`${API_URL}/api/book-appointment`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify({
              services,
              packages,
              remarks,
              appointmentDate,
              appointmentTime,
              outlet,
              price,
            }),
          });

          if (response.ok) {
            alert("Appointment booked successfully!");
            showPaymentModal(); // Show payment modal after booking
          } else {
            alert("Failed to book appointment.");
          }
        }

        // Function to calculate the total price of selected items in the cart
        async function calculateTotalPrice() {
          try {
            console.log(userId);
            // Fetch cart data
            const response = await fetch(`${API_URL}/api/cart/${userId}`);
            const data = await response.json();

            // Initialize total price
            let totalPrice = 0;

            // Calculate price from services
            if (Array.isArray(data.serviceId)) {
              data.serviceId.forEach((service) => {
                if (typeof service.price === "number") {
                  totalPrice += service.price;
                } else {
                  console.error("Invalid price format in service:", service);
                }
              });
            }

            // Calculate price from packages
            if (Array.isArray(data.packageId)) {
              data.packageId.forEach((packageItem) => {
                if (typeof packageItem.price === "number") {
                  totalPrice += packageItem.price;
                } else {
                  console.error(
                    "Invalid price format in package:",
                    packageItem
                  );
                }
              });
            }

            // Log and return the total price
            console.log("Total Price:", totalPrice);
            return totalPrice;
          } catch (error) {
            console.error("Error calculating total price:", error);
            throw error;
          }
        }

        // Show the payment modal
        function showPaymentModal() {
          var myModal = new bootstrap.Modal(
            document.getElementById("paymentModal"),
            {
              keyboard: false,
            }
          );
          myModal.show();
        }

        // Hide the payment modal
        function hidePaymentModal() {
          var myModal = bootstrap.Modal.getInstance(
            document.getElementById("paymentModal")
          );
          myModal.hide();
        }
        // Payment modal handlers
        const payNowBtn = document.getElementById("payNowBtn");
        const payLaterBtn = document.getElementById("payLaterBtn");

        if (payNowBtn) {
          payNowBtn.addEventListener("click", function () {
            console.log("Pay Now button clicked");
            openRazorpay(); // Trigger Razorpay for payment integration
          });
        }

        if (payLaterBtn) {
          payLaterBtn.addEventListener("click", function () {
            console.log("Pay Later button clicked");
            hidePaymentModal();
          });
        }

        async function getRazorpayKey() {
          const response = await fetch("/get-razorpay-key");
          const data = await response.json();
          return data.key;
        }

        // Razorpay Payment Gateway Function
        async function openRazorpay() {
          const razorpayKey = await getRazorpayKey();
          var options = {
            key: razorpayKey, // Replace with your Razorpay key
            amount: calculateTotalPrice(), // Amount in smallest currency unit (e.g., 50000 for Rs. 500)
            currency: "INR", // Currency code
            name: "BayLeaf", // Your salon name or business name
            description: "Appointment Payment",
            image: "https://example.com/logo.png", // Logo URL
            handler: function (response) {
              alert(
                "Payment successful. Payment ID: " +
                  response.razorpay_payment_id
              );
            },
            theme: {
              color: "#F37254",
            },
          };
          var rzp1 = new Razorpay(options);
          rzp1.open();
        }

        // Event listener for search button to fetch relevant services and packages
        document
          .getElementById("searchButton")
          .addEventListener("click", () => {
            const query = document.getElementById("search").value;
            console.log(query);
            searchServicesAndPackages(query); // Trigger search with the entered query
          });
        document
          .getElementById("bookAppointment")
          .addEventListener("click", bookAppointment);

        // Call fetchUserId initially to set up everything
        await fetchUserId();
      });
    </script>
  </body>
</html>
