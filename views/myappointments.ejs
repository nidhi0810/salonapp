<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>My Appointments</title>
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <style>
      /* Custom top margin to push content below the fixed navbar */
      .mt-custom {
        margin-top: 80px;
      }

      /* Fixed navbar style (optional padding if needed) */
      .fixed-navbar {
        position: fixed;
        top: 0;
        width: 100%;
        z-index: 1000;
      }

      /* Card styling for appointments */
      .appointment-card {
        background-color: #fff;
        border-left: 4px solid #8e44ad; /* Purple accent */
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s ease;
        /* Add this */
        width: 80%;
        max-width: 900px;
      }

      .appointment-card:hover {
        transform: scale(1.01);
      }

      /* Card content */
      .card-info h5 {
        font-size: 1.2rem;
        color: #333;
        margin-bottom: 8px;
      }

      .card-info p {
        margin: 6px 0;
        font-size: 0.95rem;
        color: #555;
      }

      /* Status pill */
      .status {
        padding: 2px 8px;
        border-radius: 12px;
        font-weight: bold;
        font-size: 0.85rem;
      }

      /* Dynamic status coloring */
      .status.carted {
        background-color: #f0ad4e;
        color: white;
      }
      .status.confirmed {
        background-color: #5cb85c;
        color: white;
      }
      .status.completed {
        background-color: #337ab7;
        color: white;
      }
      .status.cancelled {
        background-color: #d9534f;
        color: white;
      }

      /* Responsive container spacing */
      .container-fluid {
        padding-left: 2rem;
        padding-right: 2rem;
      }

      /* Outlet dropdown spacing */
      #outlet {
        margin-bottom: 20px;
      }

      /* Placeholder style for select */
      #outlet option[disabled] {
        color: #aaa;
      }
      #appointmentsContainer {
        display: flex;
        flex-direction: column;
        align-items: center;
      }
    </style>
    <style>
      .badge {
        display: inline-block;
        padding: 0.25em 0.6em;
        font-size: 0.75em;
        color: white;
        background-color: #6c757d;
        border-radius: 0.25rem;
      }
      .edit-icon {
        position: absolute;
        top: 15px;
        right: 20px;
        cursor: pointer;
        color: #8e44ad;
        font-size: 1.2rem;
      }
      .appointment-card {
        position: relative;
      }
    </style>
  </head>
  <body>
    <div class="fixed-navbar"><%- include('navbar') %></div>
    <div class="container-fluid mt-custom">
      <div class="row">
        <div class="col-12 p-4">
          <div id="appointmentsContainer">
            <!-- Appointments will be dynamically rendered here -->
          </div>
        </div>
      </div>
    </div>
    <!-- Edit Modal -->
    <div
      class="modal fade"
      id="editModal"
      tabindex="-1"
      aria-labelledby="editModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-xl">
        <!-- Use modal-xl for a wider view -->
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="editModalLabel">Edit Appointment</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>

          <div class="modal-body">
            <div class="row">
              <!-- Left Column: Cart -->
              <div class="col-md-6">
                <h5>Cart</h5>
                <div
                  id="cartItems"
                  class="border p-3 rounded bg-light"
                  style="max-height: 400px; overflow-y: auto"
                >
                  <!-- Cart items dynamically injected here -->
                </div>
              </div>

              <!-- Right Column: Search Services/Packages -->
              <div class="col-md-6">
                <h5>Search</h5>
                <!-- Search Bar and Button -->
                <div class="d-flex mb-3">
                  <input
                    type="text"
                    class="form-control me-2"
                    id="search"
                    placeholder="Search services and packages"
                  />
                  <button
                    class="btn btn-primary"
                    style="
                      background-color: #5e2b97;
                      color: white;
                      border: none;
                    "
                    id="searchButton"
                  >
                    Search
                  </button>
                </div>

                <!-- Result List -->
                <div id="searchResults" class="list-group"></div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Cancel Confirmation Modal -->
    <div
      class="modal fade"
      id="cancelModal"
      tabindex="-1"
      aria-labelledby="cancelModalLabel"
      aria-hidden="true"
    >
      <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="cancelModalLabel">
              Confirm Cancellation
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            Are you sure you want to cancel this appointment?
          </div>
          <div class="modal-footer">
            <button id="confirmCancelBtn" class="btn btn-danger">
              Yes, Cancel
            </button>
            <button class="btn btn-secondary" data-bs-dismiss="modal">
              No
            </button>
          </div>
        </div>
      </div>
    </div>

    <script>
      const API_URL = "https://bayleaf.onrender.com"; // Change if needed
      let currentAppointmentId = null;
      let originalDate = null;
      let originalTime = null;
      let selectedAppointmentIdToCancel = null;
      const fetchAppointments = async () => {
        try {
          const userResponse = await fetch(`${API_URL}/api/userRole`);
          const { userId } = await userResponse.json();

          const appointmentsResponse = await fetch(
            `${API_URL}/api/users/${userId}/appointments`
          );
          const appointments = await appointmentsResponse.json();

          renderAppointments(appointments);
        } catch (error) {
          console.error("Error fetching appointments:", error);
        }
      };

      const renderAppointments = (appointments) => {
        const container = document.getElementById("appointmentsContainer");
        container.innerHTML = "";

        if (appointments.length === 0) {
          container.innerHTML = `<p>No appointments found.</p>`;
          return;
        }

        // ⬇️ Sort so newest appointments appear first
        appointments.sort(
          (a, b) => new Date(b.createdAt) - new Date(a.createdAt)
        );

        appointments.forEach((appointment) => {
          const card = document.createElement("div");
          card.className = "appointment-card";
          const formattedDate = new Date(
            appointment.appointmentDate
          ).toLocaleDateString("en-US", {
            year: "numeric",
            month: "long",
            day: "numeric",
          });
          const servicesHtml =
            appointment.services
              ?.map((s, index) => {
                const name = s.service?.serviceName || "Unnamed Service";
                let status = s.status || "Unknown";
                if (status === "Assigned") status = "Confirmed";
                else if (status === "Not Assigned") status = "Not Confirmed";

                return `
        <div class="item-line">
          Service ${index + 1}: ${name} 
          <span class="badge">${status}</span>
        </div>`;
              })
              .join("") || "<p>None</p>";

          const packagesHtml =
            appointment.packages
              ?.map((p, index) => {
                const name = p.package?.packageName || "Unnamed Package";
                let status = p.status || "Unknown";
                if (status === "Assigned") status = "Confirmed";
                else if (status === "Not Assigned") status = "Not Confirmed";

                return `
        <div class="item-line">
          Package ${index + 1}: ${name} 
          <span class="badge">${status}</span>
        </div>`;
              })
              .join("") || "<p>None</p>";

          card.innerHTML = `
  <div class="edit-icon" onclick="editAppointment('${appointment._id}')">
    <i class="bi bi-pencil-square"></i>
  </div>
  <div class="card-info d-flex flex-column" style="height: 100%;">
    <div>
      <h5 class="card-title">Appointment on ${formattedDate} at ${
            appointment.appointmentTime
          }</h5>
      <p class="card-text"><strong>Services:</strong></p>
      ${servicesHtml}
      <p class="card-text mt-2"><strong>Packages:</strong></p>
      ${packagesHtml}
    </div>
    <div class="d-flex justify-content-end mt-auto">
      ${
        appointment.status === "Cancelled"
          ? `<button class="btn btn-outline-secondary mt-3" disabled>Cancelled</button>`
          : `<button class="btn btn-outline-danger mt-3" onclick="openCancelModal('${appointment._id}')">Cancel Appointment</button>`
      }

    </div>
  </div>
`;

          container.appendChild(card);
        });
      };

      async function editAppointment(appointmentId) {
        currentAppointmentId = appointmentId;

        // Open the modal
        const modal = new bootstrap.Modal(document.getElementById("editModal"));
        modal.show();

        try {
          const res = await fetch(
            `${API_URL}/api/appointments/${appointmentId}`
          );
          if (!res.ok) throw new Error("Failed to fetch appointment");

          const appointment = await res.json();

          const date = appointment.appointmentDate?.split("T")[0] || "";
          const time = appointment.appointmentTime || "";

          await loadCartForAppointment(appointmentId);
        } catch (error) {
          console.error("Error loading appointment:", error);
        }
      }

      async function loadCartForAppointment(appointmentId) {
        try {
          const response = await fetch(
            `${API_URL}/api/staff/cart/${appointmentId}`
          );
          if (response.ok) {
            const cart = await response.json();
            displayCart(cart, appointmentId);
          } else if (response.status === 404) {
            displayCart({ services: [], packages: [] }, appointmentId);
          } else {
            alert("Failed to load cart");
          }
        } catch (error) {
          console.error("Error loading cart:", error);
        }
      }

      function displayCart(cart, appointmentId) {
        const cartItems = document.getElementById("cartItems");
        cartItems.innerHTML = "";

        const isEmpty =
          (!cart.services || cart.services.length === 0) &&
          (!cart.packages || cart.packages.length === 0);

        if (isEmpty) {
          cartItems.innerHTML =
            "<div class='text-muted text-center'>Your cart is empty!</div>";
          return;
        }

        if (cart.services?.length) {
          cartItems.innerHTML += "<h6>Services</h6>";
          cart.services.forEach((item) => {
            const service = item?.service;
            if (service) {
              const id = service._id;
              cartItems.innerHTML += `
              <div class="d-flex justify-content-between mb-2">
                <div>${service.serviceName || "Unnamed"} - ₹${
                service.price || 0
              }</div>
                <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart('${appointmentId}', '${id}', 'service')">❌</button>
              </div>`;
            }
          });
        }

        if (cart.packages?.length) {
          cartItems.innerHTML += "<h6>Packages</h6>";
          cart.packages.forEach((item) => {
            const pkg = item?.package;
            if (pkg) {
              const id = pkg._id;
              cartItems.innerHTML += `
              <div class="d-flex justify-content-between mb-2">
                <div>${pkg.packageName || "Unnamed"} - ₹${pkg.price || 0}</div>
                <button class="btn btn-sm btn-outline-danger" onclick="removeFromCart('${appointmentId}', '${id}', 'package')">❌</button>
              </div>`;
            }
          });
        }
      }

      async function removeFromCart(appointmentId, itemId, type) {
        try {
          const res = await fetch(`${API_URL}/api/staff/cart/remove`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ appointmentId, itemId, type }),
          });

          const data = await res.json();
          if (res.ok) {
            console.log("Item removed:", data);
            await loadCartForAppointment(appointmentId);
          } else {
            alert(data.message || "Failed to remove item.");
          }
        } catch (err) {
          console.error("Remove failed:", err);
        }
      }

      async function addToCart(itemId, type) {
        try {
          const res = await fetch(`${API_URL}/api/staff/cart/add`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              appointmentId: currentAppointmentId,
              itemId,
              type,
            }),
          });

          const data = await res.json();
          if (res.ok) {
            console.log("Item added:", data);
            await loadCartForAppointment(currentAppointmentId);
          } else {
            alert(data.message || "Failed to add item.");
          }
        } catch (err) {
          console.error("Add to cart failed:", err);
        }
      }

      async function searchServicesAndPackages(query) {
        try {
          const responseServices = await fetch(
            `${API_URL}/api/services?search=${query}`
          );
          const servicesResult = await responseServices.json();

          const responsePackages = await fetch(
            `${API_URL}/api/packages?search=${query}`
          );
          const packagesResult = await responsePackages.json();

          const services = Array.isArray(servicesResult.data)
            ? servicesResult.data
            : [];
          const packages = Array.isArray(packagesResult.data)
            ? packagesResult.data
            : [];

          if (services.length > 0 || packages.length > 0) {
            displayServicesAndPackages(services, packages);
          } else {
            console.error("No services or packages found.");
          }
        } catch (error) {
          console.error("Error fetching services or packages:", error);
        }
      }

      document.getElementById("searchButton").addEventListener("click", () => {
        const query = document.getElementById("search").value;
        searchServicesAndPackages(query);
      });

      function displayServicesAndPackages(services, packages) {
        const resultContainer = document.getElementById("searchResults");
        resultContainer.innerHTML = ""; // clear previous results

        if (services.length === 0 && packages.length === 0) {
          resultContainer.innerHTML =
            "<div class='text-muted'>No results found.</div>";
          return;
        }

        // Display Services
        if (services.length > 0) {
          const serviceHeader = document.createElement("div");
          serviceHeader.className = "fw-bold mb-1";
          serviceHeader.innerText = "Services";
          resultContainer.appendChild(serviceHeader);

          services.forEach((service) => {
            const item = document.createElement("div");
            item.className =
              "list-group-item d-flex justify-content-between align-items-center";
            item.innerHTML = `
        <span>${service.serviceName} - ₹${service.price}</span>
        <button class="btn btn-sm " onclick="addToCart('${service._id}', 'service')">➕</button>
      `;
            resultContainer.appendChild(item);
          });
        }

        // Display Packages
        if (packages.length > 0) {
          const packageHeader = document.createElement("div");
          packageHeader.className = "fw-bold mt-3 mb-1";
          packageHeader.innerText = "Packages";
          resultContainer.appendChild(packageHeader);

          packages.forEach((pkg) => {
            const item = document.createElement("div");
            item.className =
              "list-group-item d-flex justify-content-between align-items-center";
            item.innerHTML = `
        <span>${pkg.packageName} - ₹${pkg.price}</span>
        <button class="btn btn-sm " onclick="addToCart('${pkg._id}', 'package')">➕</button>
      `;
            resultContainer.appendChild(item);
          });
        }
      }
      document.addEventListener("DOMContentLoaded", function () {
        const modalEl = document.getElementById("editModal");

        if (modalEl) {
          modalEl.addEventListener("hidden.bs.modal", function () {
            location.reload(); // Refresh the page when modal closes
          });
        }
      });

      // Opens the cancel confirmation modal
      function openCancelModal(appointmentId) {
        selectedAppointmentId = appointmentId;
        const modal = new bootstrap.Modal(
          document.getElementById("cancelModal")
        );
        modal.show();
      }

      // Attach event listener once DOM is ready
      document.addEventListener("DOMContentLoaded", () => {
        document
          .getElementById("confirmCancelBtn")
          .addEventListener("click", async () => {
            if (selectedAppointmentId) {
              try {
                const res = await fetch(
                  `${API_URL}/api/appointments/cancel/${selectedAppointmentId}`,
                  {
                    method: "POST",
                  }
                );
                const data = await res.json();
                if (res.ok) {
                  alert("Appointment canceled successfully");
                  // Refresh or re-fetch appointments
                  fetchAppointments();
                } else {
                  alert(data.message || "Failed to cancel");
                }
              } catch (error) {
                console.error(error);
                alert("Something went wrong");
              }
            }
            const modalElement = bootstrap.Modal.getInstance(
              document.getElementById("cancelModal")
            );
            modalElement.hide();
          });
      });

      fetchAppointments();
    </script>
  </body>
</html>
