<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Staff Appointment Booking</title>
    <link
      rel="stylesheet"
      href="https://code.getmdl.io/1.3.0/material.cyan-teal.min.css"
    />
    <!-- Load the time picker script -->
    <script src="/js/analogue-time-picker/analogue-time-picker.min.js"></script>
    <!-- Flatpickr CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/flatpickr/dist/flatpickr.min.css"
    />
    <!-- Bootstrap CSS -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <style>
      body {
        font-family: "Poppins", sans-serif;
        background-color: #fafafa;
        color: #2c2c2c;
      }

      h2 {
        color: #663399;
        position: relative;
        padding-bottom: 1rem;
        margin-bottom: 2rem;
      }

      #search {
        border-radius: 10px;
        padding-left: 1rem;
        box-shadow: 0 4px 10px rgba(102, 51, 153, 0.05);
        border: 1px solid #ccc;
      }

      #searchButton {
        background: linear-gradient(135deg, #663399, #9370db);
        border: none;
        border-radius: 8px;
        padding: 0.5rem 1.2rem;
        color: white;
        transition: all 0.3s;
      }

      #searchButton:hover {
        background: linear-gradient(135deg, #9370db, #e6e6fa);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 51, 153, 0.2);
      }

      #categoryPanel .list-group-item {
        border: none;
        border-radius: 10px;
        margin-bottom: 10px;
        background: white;
        box-shadow: 0 4px 10px rgba(102, 51, 153, 0.05);
        transition: 0.3s;
      }

      #categoryPanel .list-group-item:hover {
        background: #f0ebfc;
        cursor: pointer;
        transform: translateX(5px);
      }

      #cartItems {
        background: white;
        box-shadow: 0 4px 10px rgba(102, 51, 153, 0.1);
        border-radius: 10px;
      }

      textarea.form-control {
        border-radius: 10px;
        box-shadow: 0 3px 8px rgba(102, 51, 153, 0.05);
      }

      select.form-select,
      input.form-control {
        border-radius: 10px;
        border: 1px solid #ccc;
        box-shadow: 0 3px 8px rgba(102, 51, 153, 0.05);
      }

      #bookAppointment {
        background: linear-gradient(135deg, #663399, #9370db);
        border: none;
        border-radius: 10px;
        padding: 0.7rem;
        color: white;
        transition: all 0.3s;
        width: 100%;
        margin-top: 1rem;
      }

      #bookAppointment:hover {
        background: linear-gradient(135deg, #9370db, #e6e6fa);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(102, 51, 153, 0.2);
      }

      /* Modal Styling */
      .modal-content {
        border-radius: 15px;
        box-shadow: 0 10px 30px rgba(102, 51, 153, 0.2);
      }

      .modal-header {
        background: linear-gradient(135deg, #663399, #9370db);
        color: white;
        border-top-left-radius: 15px;
        border-top-right-radius: 15px;
      }

      .modal-body button {
        margin-right: 10px;
        border-radius: 8px;
        padding: 0.5rem 1.2rem;
        transition: all 0.3s;
      }
      .payment-btn {
        padding: 10px 24px !important;
        font-size: 16px !important;
        font-weight: 600 !important;
        border: none !important;
        border-radius: 10px !important;
        color: #fff !important;
        transition: all 0.3s ease !important;
        margin-right: 12px !important;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1) !important;
      }

      .pay-now {
        background: linear-gradient(135deg, #663399, #9370db) !important;
      }

      .pay-now:hover {
        background: linear-gradient(135deg, #7a5cc7, #baa8f3) !important;
      }
      .pay-later {
        background-color: #fff !important;
        color: #663399 !important;
        border: none !important;
        box-shadow: none !important;
      }

      .pay-later:hover {
        background-color: #f3eaff !important;
        color: #663399 !important;
      }

      @media (max-width: 768px) {
        #search {
          margin-bottom: 1rem;
        }

        .row.mt-4 > div {
          margin-bottom: 1.5rem;
        }

        #bookAppointment {
          width: 100%;
        }
      }

      .card {
        border: none;
        border-radius: 15px;
        overflow: hidden;
        box-shadow: 0 4px 12px rgba(102, 51, 153, 0.1);
        transition: transform 0.2s ease, box-shadow 0.3s ease;
        margin-bottom: 20px;
      }

      .card:hover {
        transform: translateY(-5px);
        box-shadow: 0 8px 20px rgba(102, 51, 153, 0.15);
      }

      .card-img-top {
        height: 180px;
        object-fit: cover;
      }

      .card-body {
        padding: 1rem;
        background-color: #fff;
      }

      .card-title {
        font-size: 1.1rem;
        font-weight: 600;
        color: #333;
        margin-bottom: 0.5rem;
      }

      .card-text {
        font-size: 1rem;
        color: #666;
        margin-bottom: 1rem;
      }

      .card-body .btn {
        background: linear-gradient(135deg, #663399, #9370db);
        color: white;
        border: none;
        border-radius: 10px;
        padding: 0.4rem 0.9rem;
        transition: background 0.3s, transform 0.2s;
      }

      .card-body .btn:hover {
        background: linear-gradient(135deg, #7a5cc7, #baa8f3);
        transform: translateY(-2px);
      }
      #categoryPanel .list-group-item {
        transition: background-color 0.3s ease, color 0.3s ease;
      }

      #categoryPanel .list-group-item.active {
        background-color: #663399 !important;
        color: #fff !important;
        border-color: #663399 !important;
      }
      /* Custom color override for analogue time picker */
      /* Make clock hand and selectors purple */
      .atp .atp-color--primary,
      .atp .mdl-color--primary,
      .atp .atp-button--primary,
      .atp .mdl-button--primary,
      .atp .atp-number-selected,
      .atp .atp-h,
      .atp .atp-b,
      .atp .atp-h-dot {
        background-color: #6f42c1 !important;
        color: #fff !important;
      }

      /* Clock number color */
      .atp .atp-n {
        color: #6f42c1 !important;
        font-weight: 500;
      }

      /* Selected number contrast */
      .atp .atp-number-selected {
        background-color: #6f42c1 !important;
        border-radius: 50% !important;
        color: #fff !important;
      }
      /* OK and Cancel buttons: white background, purple text */
      .atp .atp-ok,
      .atp .atp-cancel {
        background-color: #fff !important;
        color: #6f42c1 !important;
        padding: 6px 16px !important;
        font-weight: 500;
        transition: all 0.2s ease;
      }

      /* Optional: On hover - slight purple tint */
      .atp .atp-ok:hover,
      .atp .atp-cancel:hover {
        background-color: #f3eaff !important;
        color: #6f42c1 !important;
      }

      /* Optional: Clock face background if you want lighter contrast */
      .atp .atp-face {
        background-color: #f8f9fa !important;
      }
      .sidebar {
        position: fixed;
        top: 0;
        left: 0;
        width: 250px;
        height: 100vh;
        background-color: #f8f9fa;
        border-right: 1px solid #dee2e6;
        padding: 20px 0;
        z-index: 1000;
      }

      .main-content {
        margin-left: 250px; /* Important: offset by sidebar width */
        padding: 20px;
        background-color: #fff;
        min-height: 100vh;
        overflow-x: auto;
      }
    </style>
  </head>
  <body>
    <%- include('adminpanel') %>
    <div class="main-content pt-5 mb-5">
      <!-- Search Bar and Category Panel -->
      <div class="d-flex position-relative">
        <input
          type="text"
          class="form-control me-2"
          id="search"
          placeholder="Search services and packages"
        />
        <button class="btn btn-primary" id="searchButton">Search</button>
      </div>

      <div class="row mt-4">
        <div class="col-3">
          <div class="list-group" id="categoryPanel">
            <!-- Categories will be dynamically added here -->
          </div>
        </div>
        <div class="col-6">
          <div class="row" id="servicesAndPackages">
            <!-- Services and packages will be dynamically displayed here -->
          </div>
        </div>
        <!-- Cart Section -->
        <div class="col-3">
          <h4>Cart</h4>
          <div
            id="cartItems"
            class="border p-3 rounded"
            style="max-height: 400px; overflow-y: auto"
          >
            <!-- Selected items will appear here dynamically -->
          </div>
          <button class="btn" id="bookAppointment">Book Appointment</button>
        </div>
      </div>

      <!-- Customer Info Fields -->
      <div class="row mt-4">
        <div class="col-md-6">
          <label for="customerName">Customer Name</label>
          <input
            type="text"
            class="form-control"
            id="customerName"
            placeholder="Enter customer's name"
          />
        </div>
        <div class="col-md-6">
          <label for="customerMobile">Customer Mobile</label>
          <input
            type="text"
            class="form-control"
            id="customerMobile"
            placeholder="Enter mobile number"
          />
        </div>
      </div>

      <!-- Remarks and Booking Details -->
      <div class="mt-4">
        <textarea
          class="form-control mb-3"
          id="remarks"
          placeholder="Add remarks (if any)"
        ></textarea>

        <div class="row">
          <div class="col-md-3">
            <label for="outlet">Select Outlet:</label>
            <select class="form-select" id="outlet">
              <option value="" disabled selected>Pick an outlet</option>
              <!-- Outlets will be dynamically added here -->
            </select>
          </div>

          <div class="col-md-3">
            <label for="appointmentDate">Select Date</label>
            <input
              type="text"
              id="appointmentDate"
              class="form-control"
              placeholder="Pick a date"
            />
          </div>

          <div class="col-md-3">
            <label for="appointmentTime">Appointment Time</label>
            <input
              type="text"
              class="form-control"
              id="appointmentTime"
              readonly
              placeholder="Pick a time"
            />
          </div>

          <div class="col-md-3">
            <label for="sourceOfAppointment">Source of Appointment</label>
            <select class="form-select" id="sourceOfAppointment">
              <option value="" disabled selected>Select source</option>
              <option value="Call">Call</option>
              <option value="SMS">SMS</option>
              <option value="Whatsapp">WhatsApp</option>
            </select>
          </div>
        </div>
      </div>
    </div>

    <!-- Flatpickr JS -->
    <script src="https://cdn.jsdelivr.net/npm/flatpickr"></script>

    <!-- Init -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        const input = document.getElementById("appointmentTime");
        window.timePickerInput({
          inputElement: input,
          theme: "dark", // or 'dark'
        });
      });
    </script>
    <script>
      document.addEventListener("DOMContentLoaded", function () {
        flatpickr("#appointmentDate", {
          dateFormat: "Y-m-d", // Customize format if needed
          minDate: "today",
        });
      });
    </script>

    <script>
      const API_URL = "https://bayleaf.onrender.com";

      document.addEventListener("DOMContentLoaded", async () => {
        let userId = null;
        let globalPrice = 0; // Declare globally

        // Fetch userId and role
        async function fetchUserId() {
          try {
            const userRoleResponse = await fetch(`${API_URL}/api/userRole`, {
              credentials: "include",
            });
            const { role, userId: fetchedUserId } =
              await userRoleResponse.json();

            if (role === "staff") {
              userId = fetchedUserId;
              console.log("User ID:", userId);
              // Load categories, outlets, and cart after fetching userId
              await loadCategories();
              await loadOutlets();
              await loadCart();
            } else {
              alert("You must be logged in as a customer to access this page.");
              window.location.href = "/login"; // Redirect to login if not a customer
            }
          } catch (error) {
            console.error("Error fetching user role and ID:", error);
            alert("Unable to fetch user information. Please try again.");
          }
        }
        // Add to cart
        window.addToCart = async function addToCart(itemId, type) {
          try {
            const response = await fetch(`${API_URL}/api/staff/cart/addnew`, {
              method: "POST",
              headers: {
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ itemId, type }), // Removed userId
            });

            if (response.ok) {
              const result = await response.json();
              //alert("Item added to cart!");
              console.log("Cart:", result.cart);
              loadCart(); // Refresh cart
            } else {
              const error = await response.json();
              alert(`Failed to add to cart: ${error.message}`);
            }
          } catch (error) {
            console.error("Error adding to cart:", error);
            alert("An error occurred while adding to the cart.");
          }
        };

        // Remove from cart
        window.removeFromCart = async function removeFromCart(itemId, type) {
          try {
            console.log(itemId, type);
            const response = await fetch(
              `${API_URL}/api/staff/cart/removenew`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({ itemId, type }), // Removed userId
              }
            );

            if (response.ok) {
              const result = await response.json();
              //alert("Item removed from cart!");
              console.log("Cart:", result.cart);
              loadCart(); // Refresh cart
            } else {
              const error = await response.json();
              alert(`Failed to remove from cart: ${error.message}`);
            }
          } catch (error) {
            console.error("Error removing from cart:", error);
            alert("An error occurred while removing from the cart.");
          }
        };

        async function loadCart() {
          try {
            const response = await fetch(`${API_URL}/api/staff/cart`);
            console.log("Cart fetch status:", response.status);
            if (response.ok) {
              const cart = await response.json();
              console.log(cart);

              displayCart(cart);
            } else if (response.status === 404) {
              displayCart({ services: [], packages: [] });
            } else {
              alert("Failed to load cart");
            }
          } catch (error) {
            console.error("Error loading cart:", error);
          }
        }

        async function displayCart(cart) {
          const cartItems = document.getElementById("cartItems");
          cartItems.innerHTML = "";

          let totalPrice = 0;

          const isCartEmpty =
            (!cart.services || cart.services.length === 0) &&
            (!cart.packages || cart.packages.length === 0);

          if (isCartEmpty) {
            const noItemsMessage = document.createElement("div");
            noItemsMessage.className = "cart-item";
            noItemsMessage.innerHTML = "Your cart is empty!";
            cartItems.appendChild(noItemsMessage);
            return;
          }

          // Services
          if (cart.services && cart.services.length > 0) {
            const serviceHeader = document.createElement("h3");
            serviceHeader.textContent = "Services";
            cartItems.appendChild(serviceHeader);

            cart.services.forEach((item) => {
              const serviceItem = document.createElement("div");
              serviceItem.className =
                "cart-item d-flex justify-content-between align-items-center";

              const name = item?.service?.serviceName || "Unnamed Service";
              const price = item?.service?.price || 0;
              totalPrice += price;

              const textSpan = document.createElement("span");
              textSpan.textContent = `Service: ${name} | Price: ₹${price}`;

              const removeBtn = document.createElement("button");
              removeBtn.textContent = "❌";
              removeBtn.style.border = "none";
              removeBtn.style.background = "transparent";
              removeBtn.style.cursor = "pointer";
              removeBtn.classList.add("ms-2");
              removeBtn.onclick = async () => {
                await removeFromCart(item.service._id, "service");
              };

              serviceItem.appendChild(textSpan);
              serviceItem.appendChild(removeBtn);
              cartItems.appendChild(serviceItem);
            });
          }

          // Packages
          if (cart.packages && cart.packages.length > 0) {
            const packageHeader = document.createElement("h3");
            packageHeader.textContent = "Packages";
            cartItems.appendChild(packageHeader);

            cart.packages.forEach((item) => {
              const packageItem = document.createElement("div");
              packageItem.className =
                "cart-item d-flex justify-content-between align-items-center";

              const name = item?.package?.packageName || "Unnamed Package";
              const price = item?.package?.price || 0;
              totalPrice += price;

              const textSpan = document.createElement("span");
              textSpan.textContent = `Package: ${name} | Price: ₹${price}`;

              const removeBtn = document.createElement("button");
              removeBtn.textContent = "❌";
              removeBtn.style.border = "none";
              removeBtn.style.background = "transparent";
              removeBtn.style.cursor = "pointer";
              removeBtn.classList.add("ms-2");
              removeBtn.onclick = async () => {
                await removeFromCart(item.package._id, "package");
              };

              packageItem.appendChild(textSpan);
              packageItem.appendChild(removeBtn);
              cartItems.appendChild(packageItem);
            });
          }

          // Show total
          globalPrice = totalPrice;

          const totalDiv = document.createElement("div");
          totalDiv.className = "mt-3 fw-bold";
          totalDiv.innerHTML = `<hr><h5>Total: ₹${totalPrice}</h5>`;
          cartItems.appendChild(totalDiv);
        }

        // Function to load categories
        async function loadCategories() {
          try {
            const response = await fetch(`${API_URL}/api/categories`);
            const categories = await response.json();
            const categoryPanel = document.getElementById("categoryPanel");

            // Ensure categories is an array before proceeding
            if (Array.isArray(categories)) {
              categories.forEach((category, index) => {
                const button = document.createElement("button");
                button.classList.add(
                  "list-group-item",
                  "list-group-item-action"
                );
                button.textContent = category; // category is a string now

                // Add click event to highlight the clicked category
                button.addEventListener("click", () => {
                  highlightCategory(button, category);
                  loadServicesByCategory(category);
                });

                // Append the button to the panel
                categoryPanel.appendChild(button);

                // Automatically click the first category when the page loads
                if (index === 0) {
                  highlightCategory(button, category);
                  loadServicesByCategory(category);
                }
              });
            } else {
              console.error("Categories data is not an array:", categories);
            }
          } catch (error) {
            console.error("Error loading categories:", error);
          }
        }

        // Function to highlight the clicked category
        function highlightCategory(button, category) {
          const buttons = document.querySelectorAll(
            "#categoryPanel .list-group-item"
          );

          // Remove highlight from all categories
          buttons.forEach((btn) => btn.classList.remove("active"));

          // Add highlight to the clicked category
          button.classList.add("active");
        }

        // Function to load outlets
        async function loadOutlets() {
          try {
            const response = await fetch(`${API_URL}/api/outlets`);
            const result = await response.json();
            // Access the `data` array
            const outlets = result.data;
            const outletSelect = document.getElementById("outlet");

            outlets.forEach((outlet) => {
              const option = document.createElement("option");
              option.value = outlet.id;
              option.textContent = `${outlet.name} - ${outlet.fullAddress}`; // Display name and address
              outletSelect.appendChild(option);
            });
          } catch (error) {
            console.error("Error loading outlets:", error);
          }
        }

        // Function to search services and packages
        async function searchServicesAndPackages(query) {
          try {
            // Fetch services and packages
            const responseServices = await fetch(
              `${API_URL}/api/services?search=${query}`
            );
            const servicesResult = await responseServices.json();

            const responsePackages = await fetch(
              `${API_URL}/api/packages?search=${query}`
            );
            const packagesResult = await responsePackages.json();

            // Check if 'data' exists and is an array in both responses
            const services = Array.isArray(servicesResult.data)
              ? servicesResult.data
              : [];
            const packages = Array.isArray(packagesResult.data)
              ? packagesResult.data
              : [];

            // If both services and packages are arrays, call the display function
            if (services.length > 0 || packages.length > 0) {
              displayServicesAndPackages(services, packages); // Pass the arrays to the display function
            } else {
              console.error("No services or packages found.");
            }
          } catch (error) {
            console.error("Error fetching services or packages:", error);
          }
        }

        // Function to load services by category
        async function loadServicesByCategory(category) {
          try {
            // Fetch services by category from the backend
            const responseServices = await fetch(
              `${API_URL}/api/services/category/${category}`
            );
            const servicesResult = await responseServices.json();
            console.log(servicesResult);
            // Check if 'data' exists and is an array
            const services = Array.isArray(servicesResult)
              ? servicesResult
              : [];

            // Fetch packages by category from the backend
            const responsePackages = await fetch(
              `${API_URL}/api/packages/category/${category}`
            );
            const packagesResult = await responsePackages.json();
            console.log(packagesResult);
            // Check if 'data' exists and is an array
            const packages = Array.isArray(packagesResult)
              ? packagesResult
              : [];
            console.log(services, packages);
            // Display the filtered services and packages
            displayServicesAndPackages(services, packages);
          } catch (error) {
            console.error("Error fetching services or packages:", error);
          }
        }

        // Function to display services and packages
        function displayServicesAndPackages(services, packages) {
          const servicesAndPackages = document.getElementById(
            "servicesAndPackages"
          );
          servicesAndPackages.innerHTML = "";

          services.forEach((service) => {
            const col = document.createElement("div");
            col.classList.add("col-3");
            col.innerHTML = `
                  <div class="card">
                      <img src="${service.imageUrl}" class="card-img-top" alt="${service.serviceName}">
                      <div class="card-body">
                          <h5 class="card-title">${service.serviceName}</h5>
                          <p class="card-text">₹${service.price}</p>
                          <button class="btn btn-primary" onclick="addToCart('${service._id}', 'service')">Add to Cart</button>
                      </div>
                  </div>
              `;
            servicesAndPackages.appendChild(col);
          });

          packages.forEach((pkg) => {
            const col = document.createElement("div");
            col.classList.add("col-3");
            col.innerHTML = `
                  <div class="card">
                      <img src="${pkg.imageUrl}" class="card-img-top" alt="${pkg.packageName}">
                      <div class="card-body">
                          <h5 class="card-title">${pkg.packageName}</h5>
                          <p class="card-text">₹${pkg.price}</p>
                          <button class="btn btn-primary" onclick="addToCart('${pkg._id}', 'package')">Add to Cart</button>
                      </div>
                  </div>
              `;
            servicesAndPackages.appendChild(col);
          });
        }

        // Function to handle the appointment booking
        async function bookAppointment() {
          try {
            // Fetch the cart data
            const cartresponse = await fetch(`${API_URL}/api/staff/cart/`);
            if (!cartresponse.ok) {
              alert("Failed to retrieve cart data.");
              return;
            }

            const cartData = await cartresponse.json();

            // Extract services and packages with only IDs
            const services = (cartData.services || []).map((s) => ({
              service: s.service._id,
            }));

            const packages = (cartData.packages || []).map((p) => ({
              package: p.package._id,
              services: (p.package.services || []).map((s) => ({
                service: s._id,
              })),
            }));

            // Get form inputs
            const customerName = document.getElementById("customerName").value;
            const customerMobile =
              document.getElementById("customerMobile").value;
            const gender = document.getElementById("gender")?.value || "Female";
            const remarks = document.getElementById("remarks").value;
            const appointmentDate =
              document.getElementById("appointmentDate").value;
            const appointmentTime =
              document.getElementById("appointmentTime").value;
            const outlet = document.getElementById("outlet").value;
            const sourceOfAppointment = document.getElementById(
              "sourceOfAppointment"
            ).value;

            if (
              !customerName ||
              !customerMobile ||
              !appointmentDate ||
              !appointmentTime ||
              !outlet ||
              !sourceOfAppointment
            ) {
              alert("Please fill in all required fields.");
              return;
            }

            const response = await fetch(
              `${API_URL}/api/staff/book-appointment`,
              {
                method: "POST",
                headers: {
                  "Content-Type": "application/json",
                },
                body: JSON.stringify({
                  customerName,
                  customerMobile,
                  services,
                  packages,
                  remarks,
                  appointmentDate,
                  appointmentTime,
                  outlet,
                  price: globalPrice,
                  sourceOfAppointment,
                }),
              }
            );

            if (response.ok) {
              alert("Appointment booked successfully!");
            } else {
              const err = await response.json();
              console.error(err);
              alert("Failed to book appointment.");
            }
          } catch (error) {
            console.error("Error booking appointment:", error);
            alert("Something went wrong. Please try again.");
          }
        }

        // Event listener for search button to fetch relevant services and packages
        document
          .getElementById("searchButton")
          .addEventListener("click", () => {
            const query = document.getElementById("search").value;
            console.log(query);
            searchServicesAndPackages(query); // Trigger search with the entered query
          });
        document
          .getElementById("bookAppointment")
          .addEventListener("click", bookAppointment);

        // Call fetchUserId initially to set up everything
        await fetchUserId();
      });
    </script>
  </body>
</html>
